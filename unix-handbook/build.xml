<!--
  ~ The MIT License
  ~
  ~ Copyright 2009 The Codehaus.
  ~
  ~ Permission is hereby granted, free of charge, to any person obtaining a copy of
  ~ this software and associated documentation files (the "Software"), to deal in
  ~ the Software without restriction, including without limitation the rights to
  ~ use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
  ~ of the Software, and to permit persons to whom the Software is furnished to do
  ~ so, subject to the following conditions:
  ~
  ~ The above copyright notice and this permission notice shall be included in all
  ~ copies or substantial portions of the Software.
  ~
  ~ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  ~ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  ~ FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  ~ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  ~ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  ~ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  ~ SOFTWARE.
  -->

<project xmlns:artifact="urn:maven-artifact-ant">

  <!--
   |
   | Maven setup
   |
   -->
  <path id="maven-ant-tasks.classpath" path="${settings.localRepository}/org/apache/maven/maven-ant-tasks/${version.maven-ant-tasks}/maven-ant-tasks-${version.maven-ant-tasks}.jar"/>
  <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant" classpathref="maven-ant-tasks.classpath" reverseLoader="true"/>

  <artifact:pom id="pom" file="pom.xml"/>

  <artifact:dependencies pathId="classpath" pomRefId="pom"/>

  <!--
   |
   | FOP
   |
   -->
  <taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop" classpathref="classpath"/>

  <!--
   |
   | Constants
   |
   -->

  <property name="docbook-xsl" value="target/docbook/docbook-xsl"/>

  <!--
   |
   | Targets
   |
   -->

  <target name="clean">
    <delete dir="target/docbook"/>
  </target>

  <target name="init">
    <mkdir dir="target/classes"/>
    <available property="docbook.unpacked" file="${docbook-xsl}"/>
  </target>

  <target name="docbook" depends="init" unless="docbook.unpacked">
    <unzip src="${net.sf.docbook:docbook-xsl:zip:ns-resources}" dest="target/docbook" overwrite="false"/>
    <copy todir="${docbook-xsl}">
      <fileset dir="target/docbook/docbook"/>
    </copy>
  </target>

  <target name="process-pom">
    <delete file="target/tmp.xml"/>
    <!-- Pick out the relevant stuff for the specified format -->
    <xslt style="src/main/docbook/process.xsl" in="src/main/docbook/examples/${example.project}/pom.magic.xml" out="target/tmp.xml">
      <param name="format" expression="${example.format}"/>
      <param name="version" expression="${project.version}"/>
    </xslt>

    <!-- Format the XML -->
    <xslt style="src/main/docbook/format.xsl" in="target/tmp.xml" out="src/main/docbook/examples/${example.project}/pom-${example.format}.xml"/>
  </target>

  <target name="create-pom">
    <antcall target="process-pom">
      <param name="example.project" value="basic"/>
      <param name="example.format" value="deb"/>
    </antcall>

    <antcall target="process-pom">
      <param name="example.project" value="basic"/>
      <param name="example.format" value="pkg"/>
    </antcall>

    <antcall target="process-pom">
      <param name="example.project" value="basic"/>
      <param name="example.format" value="rpm"/>
    </antcall>

    <antcall target="process-pom">
      <param name="example.project" value="basic"/>
      <param name="example.format" value="zip"/>
    </antcall>
  </target>

  <target name="resolve" depends="create-pom,docbook">
    <antcall target="style">
      <param name="style.input" value="src/main/docbook/content/handbook.xml"/>
      <param name="style.output" value="target/docbook/handbook-identity.xml"/>
      <param name="style.xsl" value="src/main/docbook/identity.xsl"/>
    </antcall>

    <antcall target="style">
      <!--
      <param name="style.input" value="test.xml"/>
      <param name="style.output" value="test-out.xml"/>
      -->
      <param name="style.input" value="target/docbook/handbook-identity.xml"/>
      <param name="style.output" value="target/docbook/handbook-resolved.xml"/>
      <param name="style.xsl" value="src/main/docbook/generate-id.xsl"/>
    </antcall>
  </target>

  <target name="html-single" depends="resolve">
    <antcall target="style">
      <param name="style.input" value="target/docbook/handbook-resolved.xml"/>
      <param name="style.output" value="target/site/handbook.html"/>
      <param name="style.xsl" value="src/main/docbook/handbook-html-single.xsl"/>
    </antcall>
  </target>

  <target name="html-chunked" depends="resolve">
    <delete dir="target/docbook/html-chunked"/>
    <antcall target="style">
      <param name="style.input" value="target/docbook/handbook-resolved.xml"/>
      <!-- This is required to get saxon to not write out a file called "${style.output}"  -->
      <param name="style.output" value="target/handbook-chunked.woot"/>
      <param name="style.xsl" value="src/main/docbook/handbook-html-chunked.xsl"/>
    </antcall>
    <mkdir dir="target/site/handbook"/>
    <copy todir="target/site/unix-maven-handbook-${project.version}">
      <fileset dir="target/site/handbook"/>
    </copy>
    <zip destfile="target/site/unix-maven-handbook-${project.version}.zip"
         basedir="target/site" includes="unix-maven-handbook-${project.version}/**"/>
  </target>

  <target name="html" depends="html-single,html-chunked"/>

  <target name="fo" depends="resolve">
    <antcall target="style">
      <param name="style.input" value="target/docbook/handbook-resolved.xml"/>
      <param name="style.output" value="target/docbook/handbook.fo"/>
      <param name="style.xsl" value="src/main/docbook/handbook-fo.xsl"/>
    </antcall>
  </target>

  <target name="pdf" depends="fo">
    <fop format="application/pdf"
         fofile="target/docbook/handbook.fo"
         outfile="target/site/handbook.pdf"/>
  </target>

  <!--
   |
   | Custom goals
   |
   | -->
  <target name="style">
    <echo>${style.input} => ${style.output}</echo>
    <java classname="com.icl.saxon.StyleSheet" failonerror="true">
      <sysproperty key="javax.xml.parsers.DocumentBuilderFactory" value="org.apache.xerces.jaxp.DocumentBuilderFactoryImpl"/>
      <sysproperty key="javax.xml.parsers.SAXParserFactory" value="org.apache.xerces.jaxp.SAXParserFactoryImpl"/>
      <sysproperty key="org.apache.xerces.xni.parser.XMLParserConfiguration" value="org.apache.xerces.parsers.XIncludeParserConfiguration"/>
      <sysproperty key="xslthl.config" value="file:///${basedir}/xslthl-config.xml"/>
      <sysproperty key="xslthl.config.verbose" value="true"/>
      <sysproperty key="basedir" value="${basedir}"/>
      <classpath>
        <pathelement location="${saxon:saxon:jar}"/>
        <pathelement location="${xerces:xercesImpl:jar}"/>
        <pathelement location="${net.sf.xslthl:xslthl:jar}"/>
        <pathelement location="${net.sf.docbook:docbook-xsl-saxon:jar}"/>
      </classpath>
      <arg value="-o"/>
      <arg value="${basedir}/${style.output}"/>
      <arg value="${basedir}/${style.input}"/>
      <arg value="${basedir}/${style.xsl}"/>
    </java>
  </target>
</project>
