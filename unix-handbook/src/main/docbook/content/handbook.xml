<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ The MIT License
  ~
  ~ Copyright 2009 The Codehaus.
  ~
  ~ Permission is hereby granted, free of charge, to any person obtaining a copy of
  ~ this software and associated documentation files (the "Software"), to deal in
  ~ the Software without restriction, including without limitation the rights to
  ~ use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
  ~ of the Software, and to permit persons to whom the Software is furnished to do
  ~ so, subject to the following conditions:
  ~
  ~ The above copyright notice and this permission notice shall be included in all
  ~ copies or substantial portions of the Software.
  ~
  ~ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  ~ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  ~ FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  ~ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  ~ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  ~ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  ~ SOFTWARE.
  -->
<book version="5.0" xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xmlns:svg="http://www.w3.org/2000/svg"
      xmlns:ns="http://docbook.org/ns/docbook"
      xmlns:mathml="http://www.w3.org/1998/Math/MathML"
      xmlns:html="http://www.w3.org/1999/xhtml">
  <info>
    <title>Unix Maven Plug-in</title>

    <author>
      <personname>Trygve Laugstøl</personname>

      <affiliation>
        <orgname>Arktekk AS</orgname>
      </affiliation>

      <email>trygve.laugstol@arktekk.no</email>
    </author>

    <pubdate>$Id: handbook.xml 14315 2011-07-08 16:08:05Z trygvis $</pubdate>
  </info>

  <acknowledgements>
    <para>Trygve Laugstøl would like to thank the following persons and
    companies in no particular order for their effort in helping with the
    development of the Unix Maven Plugin</para>

    <itemizedlist>
      <listitem>
        <para>Erik Drolshammer, Objectware for providing me with RPM related
        use cases and being helpful with testing new features.</para>
      </listitem>

      <listitem>
        <para>Conax for providing use cases and allowing me to work on the
        plugin while on the clock.</para>
      </listitem>

      <listitem>
        <para>Arktekk for sponsoring me to work on the plugin.</para>
      </listitem>
    </itemizedlist>
  </acknowledgements>

  <preface>
    <title>Preface</title>

    <para>This handbook is the complete documentation of the Unix Maven
    Plugin. It has four major parts:</para>

    <itemizedlist>
      <listitem>
        <para>Part I - Guide: An introduction and overview over the plugin.
        This part is the first you should read if you're looking into using
        the plugin or is getting started.</para>
      </listitem>

      <listitem>
        <para>Part II - Examples: This part is contains a set of practical
        examples showing different aspects of the plugin.</para>
      </listitem>

      <listitem>
        <para>Part III - Reference: This is the reference manual for the
        plugin. Documents all available options and assembly
        operations.</para>
      </listitem>

      <listitem>
        <para>Part IV - Package Command Reference: A list of commands useful
        for looking into and debugging assembled packages.</para>
      </listitem>

      <listitem>
        <para>Part V - Version History and Upgrading: This part contains a
        list of all major features added in the different versions and
        explanations on how to upgrade between the different versions.</para>
      </listitem>
    </itemizedlist>

    <para>The book is under continous development and is written in parallel
    with the plugin. It will only document the current version until a stable
    release is done. See <xref linkend="version-history-and-upgrading" /> on
    how to upgrade from one version to the next version.</para>

    <para>Currently there are chapters and sections that serve as placeholders
    and there are warnings which serve as TODO entries. These will be filled
    in and resolved before a final 1.0 release.</para>
  </preface>

  <part xml:id="guide">
    <title>Guide</title>

    <chapter xml:id="introduction">
      <title>Introduction</title>

      <section xml:id="scope">
        <title>Scope</title>

        <warning>
          <para>What does the plugin cover, what does it not cover. Contrast
          in particular with the Assembly plugin</para>
        </warning>
      </section>

      <section xml:id="about-the-plugin">
        <title>About the plugin</title>

        <para>The Unix Maven Plugin is meant to fill in the gap between
        creating platform independent applications and reality. It make it
        possible to create Java application with your standard Java
        development stack, but still be able to install the applications using
        the native tools that your system administrators already know.</para>

        <para>As it automates yet another step in the development
        chain<footnote>
            <para>Development chain here refers to all the step that's between
            writing the code in an IDE to having it run in production or a
            production-like environment.</para>
          </footnote>, it also give a new set of possibilities that can be
        taken advantage of. In particular the ability to store production
        ready binaries in a repository and the ability to install, remove and
        upgrade the software in an uniform and consistent way across an entire
        company.</para>

        <para>Both of these abilities is similar to what Maven did for Java
        developers with the repository concept with Maven 1 and the high focus
        on build unification in Maven 2.</para>
      </section>

      <section xml:id="how-the-plugin-work">
        <title>How the Plugin Work</title>

        <para>This section is a high level explanation of how the plugin
        work.</para>

        <para>The plugin goes through two major phases:</para>

        <itemizedlist>
          <listitem>
            <para>Meta data generation: Each package format contain some form
            of meta data that it uses when the package is being installed or
            removed. The plugin will pick up as much meta data as possible
            from the Maven POM as possible, but there are certain options that
            might have to be filled in, depending on the package
            format.</para>
          </listitem>

          <listitem>
            <para>Assembly operation execution: For each package that is to be
            created, a virtual package file system is created with pointers to
            the original file or which file in and archive the file came from.
            The assembled file system will be used when the physical package
            is created.</para>
          </listitem>
        </itemizedlist>

        <section>
          <title>Meta Data Generation</title>

          <para>The first thing that happens is that the plugin starts to
          gather all the information it needs to build the package. It has
          main sources it uses:</para>

          <itemizedlist>
            <listitem>
              <para>The general information in the POM</para>
            </listitem>

            <listitem>
              <para>The <tag>&lt;configuration&gt;</tag> of the plugin is used
              to set up defaults and contain, amongst other settings, a shared
              list of assembly operations</para>
            </listitem>

            <listitem>
              <para>The per-package configuration <tag>&lt;package&gt;</tag>
              entry</para>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>Assembly Operation Execution</title>

          <para>The virtual package file system is just like a normal file
          system. Files can be added, and their attributes can be modified by
          any operation. As in a normal file system, if the a file is written
          to the file system twice, the last one will overwrite the first
          one.</para>

          <para>As the file system is just a virtual file system with pointers
          to the original file or files in an archive only the last file will
          actually be used when creating the physical package.</para>

          <para>When an existing file object is used as a source, as much as
          possible of the existing attributes will be copied from the
          object.</para>

          <para>After all the assembly operations has been executed, the
          physical package file will be created.</para>

          <para>See also <xref
          linkend="concept-package-file-system" />.</para>
        </section>
      </section>

      <section>
        <title>About the Alternatives to the Unix Maven Plugin</title>

        <note>
          <para>This information is current as of May 2009.</para>
        </note>

        <para>The Unix Maven Plugin contains functionality that is similar to
        at least four existing plugins: The Deb Maven plugin, the RPM Maven
        Plugin, the Solaris Maven plugin and the Maven Assembly plugin.</para>

        <para>The Unix plugin is loosely based on the source code of the Deb,
        Solaris and Rpm Maven plugins and was meant as a unified and complete
        replacement for all three plugins. The plugins supported different
        areas of functionality and the Unix plugin has implemented all
        features for all formats where applicable. The Unix plugin is already
        more complete and easier to use than the Deb and Solaris plugins. The
        RPM plugin still has features that the Unix plugin does not support
        yet.</para>

        <para>One major feature of the Unix Maven plugin is the support for
        assembling the files to be included into the package, including file
        attributes. The Assembly plugin is cumbersome to use and gives little
        to no control over the file attributes that are requested. If the Unix
        plugin was to require a pre-assembled file system before executing the
        process would be significantly slower as all the files would have to
        be written to disk in an intermediate area. The Unix Maven plugin
        optimizes this as much as possible and will in many cases read the
        files directly from inside the Maven repository or from archives in a
        repository. This gives significant speed improvements when large
        binaries are created.</para>
      </section>
    </chapter>

    <chapter>
      <title>Concepts</title>

      <section>
        <title>Operation Modes</title>

        <para>The plugin can operate in two major modes, depending on how it
        is configured:</para>

        <variablelist>
          <varlistentry>
            <term>Primary artifact mode</term>

            <listitem>
              <para>The plugin is running in primary mode when the project has
              set a &lt;packaging&gt; to one of the packaging that the plugin
              support. The plugin will install an artifact as the primary
              artifact into the repository</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Attached artifact mode</term>

            <listitem>
              <para>The plugin is running in attached mode when the project is
              executing the one of the package-FOO-attached goals. The plugin
              will install a package in addition to the primary artifact which
              will be delivered by another plugin.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section>
        <title>Package Formats</title>

        <para>A package format is a specific file format that a platform
        supports. The plugin currently support three formats; deb, pkg and
        rpm.</para>
      </section>

      <section>
        <title>Platform</title>

        <para>A platform is a specific operating system, for example Debian or
        Solaris. Each platform has its own native package format while some
        platforms support multiple formats.</para>
      </section>

      <section xml:id="concept-package-file-system">
        <title>Package File System and File System Objects</title>

        <para>A package file system is a virtual file system created while the
        plugin executes all the assembly operations. It consist of file
        objects that represent regular files, directories and symbolic
        links.</para>

        <para>Each file system object has a set of attributes similar to a
        normal Unix file system:</para>

        <variablelist>
          <varlistentry>
            <term>User and group</term>

            <listitem>
              <para>These two attributes control the user and group that own
              the file.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Mode</term>

            <listitem>
              <para>The read, write and execute permissions of the file
              object.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Tags</term>

            <listitem>
              <para>Each file object can have a set of tags which are plain
              text labels that each package format can use as an extension
              method.</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <example>
          <title>Example of file mode specifications</title>

          <itemizedlist>
            <listitem>
              <para><literal>0644</literal> becomes
              <literal>-rw-r--r--</literal></para>
            </listitem>

            <listitem>
              <para><literal>0744</literal> becomes
              <literal>-rwxr--r--</literal></para>
            </listitem>
          </itemizedlist>
        </example>

        <note>
          <para>Not all file objects support all attributes.</para>
        </note>
      </section>
    </chapter>

    <chapter>
      <title>Default Values</title>

      <section>
        <title>Default Assembly Operations</title>

        <warning>
          <para>Show a completely expanded <tag>&lt;configuration&gt;</tag>
          section with defaults</para>
        </warning>
      </section>
    </chapter>
  </part>

  <part>
    <title>Example of Usage</title>

    <preface>
      <title>Introduction to the Examples</title>

      <warning>
        <para>Explain the general format of each example, which concepts are
        used. Other plugins used. Different formats.</para>
      </warning>
    </preface>

    <chapter>
      <title>Single, Standalone Application</title>

      <warning>
        <para>Missing appassembler snippet</para>
      </warning>

      <para>This is an example on how a simple, standalone application can be
      packaged. The example is available in all four formats.</para>

      <para>Keywords:</para>

      <itemizedlist>
        <listitem>
          <para>Primary Artifact Mode</para>
        </listitem>

        <listitem>
          <para><link linkend="copy-artifact"> <tag>&lt;copyArtifact&gt;</tag>
          </link></para>
        </listitem>

        <listitem>
          <para><link linkend="extract-artifact">
          <tag>&lt;extractArtifact&gt;</tag> </link></para>
        </listitem>

        <listitem>
          <para><link linkend="symlink"> <tag>&lt;symlink&gt;</tag>
          </link></para>
        </listitem>
      </itemizedlist>

      <section>
        <title>The Deb version</title>

        <section>
          <title><code>pom.xml</code> for the deb version</title>

          <programlisting language="xml"><?dbfo-font-size 75% ?><xi:include
              href="../examples/basic/pom-deb.xml" parse="text" /></programlisting>
        </section>

        <section>
          <title>Resulting Deb</title>

          <para>After running <command>mvn install</command> on the project,
          the package is packaged into
          <filename>target/basic-1.0-SNAPSHOT.deb</filename>.</para>

          <para>The package will contain these files:</para>

          <screen><?dbfo-font-size 75% ?><xi:include
              href="../examples/basic/dpkg-deb-c.txt" parse="text" /></screen>

          <para>The generated control file:</para>

          <screen><?dbfo-font-size 75% ?><xi:include
              href="../examples/basic/dpkg-deb-f.txt" parse="text" /></screen>
        </section>
      </section>

      <section>
        <title>The Pkg version</title>

        <section>
          <title><code>pom.xml</code> for the pkg version</title>

          <programlisting language="xml"><?dbfo-font-size 75% ?><xi:include
              href="../examples/basic/pom-pkg.xml" parse="text" /></programlisting>
        </section>

        <section>
          <title>Resulting PKG</title>

          <para>After running <command>mvn install</command> on the pkg
          version of the project, the package is packaged into
          <filename>target/basic-pkg-1.0.pkg</filename>.</para>

          <para>The generated meta data will look like this:</para>

          <screen><?dbfo-font-size 75% ?><xi:include
              href="../examples/basic/pkginfo.txt" parse="text" /></screen>

          <para>Notice that the SNAPSHOT part of the version string has been
          replaced with the a timestamp.</para>

          <para>To see verify the paths and their attributes, run this:</para>

          <screen><?dbfo-font-size 75% ?><xi:include
              href="../examples/basic/pkgchk.txt" parse="text" /></screen>
        </section>
      </section>

      <section>
        <title>The RPM version</title>

        <section>
          <title><code>pom.xml</code> for RPM version</title>

          <programlisting language="xml"><?dbfo-font-size 75% ?><xi:include
              href="../examples/basic/pom-pkg.xml" parse="text" /></programlisting>
        </section>

        <section>
          <title>Resulting RPM</title>

          <para>After running <command>mvn install</command> on the rpm
          version of the project, the package is packaged into
          <filename>target/basic-pkg-1.0.rpm</filename>.</para>

          <para>The package will contain these files:</para>

          <screen><?dbfo-font-size 75% ?><xi:include
              href="../examples/basic/rpm-qlp.txt" parse="text" /></screen>
        </section>
      </section>

      <section>
        <title>The Zip version</title>

        <section>
          <title><code>pom.xml</code> for the zip version</title>

          <programlisting language="xml"><?dbfo-font-size 75% ?><xi:include
              href="../examples/basic/pom-zip.xml" parse="text" /></programlisting>
        </section>

        <section>
          <title>Resulting ZIP</title>

          <para>After running <command>mvn install</command> on the rpm
          version of the project, the package is packaged into
          <filename>target/basic-pkg-1.0.rpm</filename>.</para>

          <para>The zip will contain these files:</para>

          <screen><xi:include href="../examples/unzip-l.txt" parse="text" /></screen>
        </section>
      </section>
    </chapter>

    <chapter>
      <title>Other</title>

      <para>Other examples to write</para>

      <variablelist>
        <varlistentry>
          <term>Package Attached to a WAR</term>

          <listitem>
            <para>Show a normal "hello world" web application (generated from
            the webapp archetype perhaps) which creates an attached
            package</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Show a complete standalone application with appassembler and
          docx plugin to generate man pages</term>

          <listitem>
            <para>Useful to show how to interact with other plugins. Should
            also show of default values if possible</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Package for multple platforms</term>

          <listitem>
            <para>Show how the src/unix/files and script directories are
            picked</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </chapter>
  </part>

  <part>
    <title>Reference</title>

    <chapter>
      <title>Unix Package Definition</title>

      <para>When the plugin is collecting all relevant data for a package it
      collects all the information in a generic object called "package
      parameters". This object is used as the basis when the package is
      created. See <xref linkend="mapping" /> on how the package parameters
      map to the format specific fields.</para>

      <note>
        <itemizedlist>
          <listitem>
            <para>Parameters that reference <code>mojo</code> refers to
            parameters configured in a <tag>&lt;configuration&gt;</tag>
            block.</para>
          </listitem>

          <listitem>
            <para>When multiple values are are available, the first one is
            selected.</para>
          </listitem>
        </itemizedlist>
      </note>

      <informaltable>
        <tgroup cols="4">
          <colspec colwidth="0.60*" />

          <colspec align="center" colwidth="0.30*" />

          <thead>
            <row>
              <entry align="center">Field</entry>

              <entry align="center">Required</entry>

              <entry align="center">Source(s)</entry>

              <entry align="center">Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><literal>groupId</literal></entry>

              <entry>Y</entry>

              <entry><code>project.groupId</code></entry>

              <entry></entry>
            </row>

            <row>
              <entry><literal>artifactId</literal></entry>

              <entry>Y</entry>

              <entry><code>project.artifactId</code></entry>

              <entry></entry>
            </row>

            <row>
              <entry><literal>version</literal></entry>

              <entry>N/A</entry>

              <entry>Calculated</entry>

              <entry>This field is calculated from different sources. See
              <xref linkend="version-calculation" /> for details.</entry>
            </row>

            <row>
              <entry><literal>revison</literal></entry>

              <entry>N</entry>

              <entry><code>mojo.revision</code></entry>

              <entry>This field is calculated from different sources unless
              specified. See <xref linkend="version-calculation" /> for
              details.</entry>
            </row>

            <row>
              <entry><literal>id</literal></entry>

              <entry>N</entry>

              <entry><code>package.id</code></entry>

              <entry>The default value is the lower case version of the
              artifact id.</entry>
            </row>

            <row>
              <entry><literal>name</literal></entry>

              <entry>N</entry>

              <entry><orderedlist>
                  <listitem>
                    <para><code>package.name</code></para>
                  </listitem>

                  <listitem>
                    <para><code>mojo.name</code></para>
                  </listitem>

                  <listitem>
                    <para><code>project.name</code></para>
                  </listitem>
                </orderedlist></entry>

              <entry>Maven will supply a default name if none is
              given.</entry>
            </row>

            <row>
              <entry><literal>description</literal></entry>

              <entry>N</entry>

              <entry><orderedlist>
                  <listitem>
                    <para><literal>package.description </literal></para>
                  </listitem>

                  <listitem>
                    <para><literal>mojo.description</literal></para>
                  </listitem>

                  <listitem>
                    <para><literal>project.description</literal></para>
                  </listitem>
                </orderedlist></entry>

              <entry></entry>
            </row>

            <row>
              <entry><literal>contact</literal></entry>

              <entry>N</entry>

              <entry><code>mojo.contact</code></entry>

              <entry></entry>
            </row>

            <row>
              <entry><literal>contactEmail</literal></entry>

              <entry>N</entry>

              <entry><code>mojo.contactEmail</code></entry>

              <entry></entry>
            </row>

            <row>
              <entry><literal>license</literal></entry>

              <entry>N</entry>

              <entry><code>project.licenses</code></entry>

              <entry>The first license listed in the POM will be used.</entry>
            </row>

            <row>
              <entry><literal>architecture</literal></entry>

              <entry>N</entry>

              <entry><orderedlist>
                  <listitem>
                    <para><literal>mojo.architecture</literal></para>
                  </listitem>

                  <listitem>
                    <para><literal>format.architecture</literal></para>
                  </listitem>
                </orderedlist></entry>

              <entry>A default value indicating that the package is
              architecture independent is used if applicable.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <warning>
        <para>Particular formats might add additional requirements.</para>
      </warning>

      <tip>
        <para>For more information see the class
        no.arktekk.unix.PackageParameters.</para>
      </tip>

      <para>In addition to the generic object, additional information is
      collected for each type of package.</para>

      <section>
        <title>Deb</title>

        <informaltable>
          <tgroup cols="4">
            <colspec colwidth="0.60*" />

            <colspec align="center" arch="" colwidth="0.30*" />

            <thead>
              <row>
                <entry align="center">Field</entry>

                <entry align="center">Required</entry>

                <entry align="center">Source(s)</entry>

                <entry align="center">Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><literal>priority</literal></entry>

                <entry>Y</entry>

                <entry><code>deb.priority</code></entry>

                <entry></entry>
              </row>

              <row>
                <entry><literal>section</literal></entry>

                <entry>Y</entry>

                <entry><code>deb.section</code></entry>

                <entry></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para>For the allowed values for the priority field, see <link
        xlink:href="http://www.debian.org/doc/debian-policy/ch-archive.html#s-priorities"><code>priorities</code></link>
        and <link
        xlink:href="http://www.debian.org/doc/debian-policy/ch-archive.html#s-subsections"><code>sections</code></link>
        sections in the Debian Policy Manual.</para>
      </section>

      <section>
        <title>Pkg</title>

        <para>The <literal>pkg</literal> format does not have any specific
        settings. All settings is derived from the generic settings.</para>
      </section>

      <section>
        <title>Rpm</title>

        <para>Additional requirements for the RPM format:</para>

        <itemizedlist>
          <listitem>
            <para>At least one license is specified in the POM.</para>
          </listitem>
        </itemizedlist>

        <informaltable>
          <tgroup cols="4">
            <colspec colwidth="0.60*" />

            <colspec align="center" colwidth="0.30*" />

            <thead>
              <row>
                <entry align="center">Field</entry>

                <entry align="center">Required</entry>

                <entry align="center">Source(s)</entry>

                <entry align="center">Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><literal>group</literal></entry>

                <entry>Y</entry>

                <entry><code>rpm.group</code></entry>

                <entry></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </section>

      <section xml:id="version-calculation">
        <title>Version Calculation</title>

        <tip>
          <para>This information is derived from <link
          xlink:href="http://mojo.codehaus.org/unix/xref-test/org/codehaus/mojo/unix/maven/core/VersionTest.html">org.codehaus.mojo.unix.maven.core.VersionTest</link>.</para>
        </tip>

        <para>When the plugin is creating a unix package it also create a
        version object which consist of the following fields:</para>

        <variablelist>
          <varlistentry>
            <term>Version</term>

            <listitem>
              <para>The "main" part of the version configured in the POM. The
              main part is everything before the last dash in the version
              string.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Revision</term>

            <listitem>
              <para>The "rest" part of the version configured in the
              POM.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Timestamp</term>

            <listitem>
              <para>The timestamp of the build. This is the same timestamp as
              the one used for installing the artifacts in the
              repository.</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>The overall strategy for SNAPSHOT versions is to make the
        version field in the package as specific as possible. This means that
        the build timestamp will be appended to the version string where
        applicable.</para>

        <section>
          <title>Version Calculation for Snapshot Versions</title>

          <informaltable>
            <tgroup cols="4">
              <colspec align="center" colwidth="0.50*" />

              <colspec align="center" colwidth="0.30*" />

              <colspec align="center" colwidth="0.30*" />

              <thead>
                <row>
                  <entry>Version</entry>

                  <entry>Revision</entry>

                  <entry>Format</entry>

                  <entry>Result</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry morerows="5"
                  valign="middle"><literal>1.2-SNAPSHOT</literal></entry>

                  <entry morerows="2" valign="middle">Not set</entry>

                  <entry>Deb</entry>

                  <entry><literal>1.2-20090423095107</literal></entry>
                </row>

                <row>
                  <entry>Pkg</entry>

                  <entry><literal>1.2-20090423095107</literal></entry>
                </row>

                <row>
                  <entry>Rpm</entry>

                  <entry><literal>1.2_20090423095107, rev:
                  </literal><literal>1</literal></entry>
                </row>

                <row>
                  <entry morerows="2"
                  valign="middle"><literal>3</literal></entry>

                  <entry>Deb</entry>

                  <entry><literal>1.2-3-20090423095107</literal></entry>
                </row>

                <row>
                  <entry>Pkg</entry>

                  <entry><literal>1.2-3-20090423095107</literal></entry>
                </row>

                <row>
                  <entry>Rpm</entry>

                  <entry><literal>1.2_20090423095107, rev:
                  </literal><literal>3</literal></entry>
                </row>

                <row>
                  <entry morerows="5"
                  valign="middle"><literal>1.2-3-SNAPSHOT</literal></entry>

                  <entry morerows="2" valign="middle">Not set</entry>

                  <entry>Deb</entry>

                  <entry><literal>1.2-3-20090423095107</literal></entry>
                </row>

                <row>
                  <entry>Pkg</entry>

                  <entry><literal>1.2-3-20090423095107</literal></entry>
                </row>

                <row>
                  <entry>Rpm</entry>

                  <entry><literal>1.2_20090423095107, rev:
                  </literal><literal>3</literal></entry>
                </row>

                <row>
                  <entry morerows="2"><literal>3</literal></entry>

                  <entry>Deb</entry>

                  <entry><literal>1.2-3-3-20090423095107</literal></entry>
                </row>

                <row>
                  <entry>Pkg</entry>

                  <entry><literal>1.2-3-3-20090423095107</literal></entry>
                </row>

                <row>
                  <entry>Pkg</entry>

                  <entry><literal>1.2_3_20090423095107, rev:
                  </literal><literal>3</literal></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
        </section>

        <section>
          <title>Version Calculation for Release Versions</title>

          <informaltable>
            <tgroup cols="4">
              <colspec align="center" colwidth="0.50*" />

              <colspec align="center" colwidth="0.30*" />

              <colspec align="center" colwidth="0.30*" />

              <thead>
                <row>
                  <entry>Version</entry>

                  <entry>Revision</entry>

                  <entry>Format</entry>

                  <entry>Result</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry morerows="5"
                  valign="middle"><literal>1.2</literal></entry>

                  <entry morerows="2" valign="middle">Not set</entry>

                  <entry>Deb</entry>

                  <entry><literal>1.2</literal></entry>
                </row>

                <row>
                  <entry>Pkg</entry>

                  <entry><literal>1.2</literal></entry>
                </row>

                <row>
                  <entry>Rpm</entry>

                  <entry><literal>1.2, rev:
                  </literal><literal>1</literal></entry>
                </row>

                <row>
                  <entry morerows="2"
                  valign="middle"><literal>3</literal></entry>

                  <entry>Deb</entry>

                  <entry><literal>1.2</literal></entry>
                </row>

                <row>
                  <entry>Pkg</entry>

                  <entry><literal>1.2</literal></entry>
                </row>

                <row>
                  <entry>Rpm</entry>

                  <entry><literal>1.2, rev:
                  </literal><literal>3</literal></entry>
                </row>

                <row>
                  <entry morerows="5"
                  valign="middle"><literal>1.2-3</literal></entry>

                  <entry morerows="2" valign="middle">Not set</entry>

                  <entry>Deb</entry>

                  <entry><literal>1.2-3</literal></entry>
                </row>

                <row>
                  <entry>Pkg</entry>

                  <entry><literal>1.2-3</literal></entry>
                </row>

                <row>
                  <entry>Rpm</entry>

                  <entry><literal>1.2, rev:
                  </literal><literal>3</literal></entry>
                </row>

                <row>
                  <entry morerows="2"><literal>3</literal></entry>

                  <entry>Deb</entry>

                  <entry><literal>1.2-3-3</literal></entry>
                </row>

                <row>
                  <entry>Pkg</entry>

                  <entry><literal>1.2-3-3</literal></entry>
                </row>

                <row>
                  <entry>Pkg</entry>

                  <entry><literal>1.2_3, rev:
                  </literal><literal>3</literal></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
        </section>
      </section>

      <section xml:base="" xml:id="mapping">
        <title>Mapping to Native Formats</title>

        <para>This table describe the relationship between the fields in the
        pom.xml and the fields in the generated package.</para>

        <para>In addition to the generic fields, some formats has additional
        mappings.</para>

        <table>
          <title>Mapping between the generic definition and the specific
          format</title>

          <tgroup cols="4">
            <colspec align="center" />

            <thead>
              <row>
                <entry>Unix Package</entry>

                <entry>Deb</entry>

                <entry>Pkg</entry>

                <entry>Rpm</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><literal>version</literal></entry>

                <entry morerows="1"
                valign="middle"><literal>Version</literal></entry>

                <entry morerows="1"
                valign="middle"><literal>VERS</literal></entry>

                <entry><literal>Version</literal></entry>
              </row>

              <row>
                <entry><literal>revision</literal></entry>

                <entry><literal>Release</literal></entry>
              </row>

              <row>
                <entry><literal>id</literal></entry>

                <entry><literal>Package</literal></entry>

                <entry><literal>PKG</literal></entry>

                <entry><literal>Name</literal></entry>
              </row>

              <row>
                <entry><literal>name</literal></entry>

                <entry morerows="1"
                valign="middle"><literal>Description</literal></entry>

                <entry><literal>NAME</literal></entry>

                <entry><literal>Summary</literal></entry>
              </row>

              <row>
                <entry><literal>description</literal></entry>

                <entry><literal>DESC</literal></entry>

                <entry><literal>Description</literal></entry>
              </row>

              <row>
                <entry><literal>contact</literal></entry>

                <entry valign="middle"><literal>Maintainer</literal></entry>

                <entry></entry>

                <entry></entry>
              </row>

              <row>
                <entry><literal>contactEmail</literal></entry>

                <entry valign="middle"></entry>

                <entry><literal>EMAIL</literal></entry>

                <entry></entry>
              </row>

              <row>
                <entry><literal>license</literal></entry>

                <entry></entry>

                <entry></entry>

                <entry><literal>License</literal></entry>
              </row>

              <row>
                <entry><literal>architecture</literal></entry>

                <entry><literal>Architecture</literal></entry>

                <entry><literal>ARCH</literal></entry>

                <entry></entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <section>
          <title>Deb Specific Mappings</title>

          <para>The <literal>Architecture</literal> field will default to
          <literal>all</literal> if not set.</para>
        </section>

        <section>
          <title>Pkg Specific Mappings</title>

          <para>The <literal>PSTAMP</literal> field in
          <literal>pkginfo</literal> is set to
          <literal>version.timestamp</literal>.</para>
        </section>

        <section>
          <title>Rpm Specific Mappings</title>

          <para></para>
        </section>
      </section>
    </chapter>

    <chapter>
      <title>Action Scripts</title>

      <para>All the native packaging formats support running programs when the
      packages are installed and removed. The plugin has automatic support for
      picking up scripts from the source folders.</para>

      <para>The plugin will automatically pick up scripts from the
      <filename>src/main/unix/scripts</filename> directory. If a build is
      generating more than one artifact, it is possible to share common parts
      of the script between the packages based on the package id. The plugin
      uses two different strategies for naming the scripts based on the
      operation mode as described below.</para>

      <section>
        <title>Action Scripts in Primary Artifact Mode</title>

        <para>In the primary artifact mode the scripts are named using the
        naming convention of the current format:</para>

        <table>
          <title>Naming convention for action scripts per format</title>

          <tgroup cols="4">
            <colspec colwidth="2*" />

            <thead>
              <row>
                <entry align="center">Action</entry>

                <entry align="center">Deb</entry>

                <entry align="center">Pkg</entry>

                <entry align="center">Rpm</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Before installation</entry>

                <entry><filename>preinst</filename></entry>

                <entry><filename>preinstall</filename></entry>

                <entry><filename>pre</filename></entry>
              </row>

              <row>
                <entry>After installation</entry>

                <entry><filename>postinst</filename></entry>

                <entry><filename>postinstall</filename></entry>

                <entry><filename>post</filename></entry>
              </row>

              <row>
                <entry>Before removal</entry>

                <entry><filename>prerm</filename></entry>

                <entry><filename>preremove</filename></entry>

                <entry><filename>preun</filename></entry>
              </row>

              <row>
                <entry>After removal</entry>

                <entry><filename>postrm</filename></entry>

                <entry><filename>postremove</filename></entry>

                <entry><filename>postun</filename></entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>Using the "after installation" script for the Deb format as an
        example, the plugin will generate a <literal>postinst</literal> file
        based on the concatination of these two files:</para>

        <itemizedlist>
          <listitem>
            <para><filename>src/main/unix/scripts/postinst</filename></para>
          </listitem>

          <listitem>
            <para><filename>src/main/unix/scripts/postinst-&lt;package
            id&gt;</filename></para>
          </listitem>
        </itemizedlist>

        <para>If one of the files are missing it will be skipped.</para>
      </section>

      <section>
        <title>Action Scripts in Attached Artifact Mode</title>

        <para>In the attached artifact mode the scripts are named after both
        the package id and the format of the current package. The action
        script files uses a generic naming convention.</para>

        <table>
          <title>Naming convention for generic action scripts</title>

          <tgroup cols="2">
            <colspec colwidth="2*" />

            <colspec colwidth="5*" />

            <thead>
              <row>
                <entry align="center">Action</entry>

                <entry align="center">Generic</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Before installation</entry>

                <entry><filename>pre-install</filename></entry>
              </row>

              <row>
                <entry>After installation</entry>

                <entry><filename>post-install</filename></entry>
              </row>

              <row>
                <entry>Before removal</entry>

                <entry><filename>pre-remove</filename></entry>
              </row>

              <row>
                <entry>After removal</entry>

                <entry><filename>post-remove</filename></entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>Againg using the "after installation" for the deb format as an
        example, the plugin will generate a postinst file based on the
        concatination of these files:</para>

        <itemizedlist>
          <listitem>
            <para><filename>src/main/unix/scripts/post-install</filename></para>
          </listitem>

          <listitem>
            <para><filename>src/main/unix/scripts/post-install-&lt;package
            id&gt;</filename></para>
          </listitem>

          <listitem>
            <para><filename>src/main/unix/scripts/post-install-&lt;package
            id&gt;-deb</filename></para>
          </listitem>
        </itemizedlist>

        <para>If one of the files are missing it will be skipped.</para>
      </section>
    </chapter>

    <chapter>
      <title>Operating Requirements</title>

      <warning>
        <para>Document the required binaries</para>
      </warning>
    </chapter>

    <chapter>
      <title>Assembly Operations</title>

      <table>
        <title>Summary of assembly operations</title>

        <tgroup cols="2">
          <colspec colnum="2" colwidth="4*" />

          <tbody>
            <row>
              <entry>Copy file</entry>

              <entry>Copies a single file</entry>
            </row>

            <row>
              <entry>Copy directory</entry>

              <entry>Copies a directory structure</entry>
            </row>

            <row>
              <entry>Copy artifact</entry>

              <entry>Copies an artifact from the repository</entry>
            </row>

            <row>
              <entry>Extract file</entry>

              <entry>Extracts a single file</entry>
            </row>

            <row>
              <entry>Extract artifact</entry>

              <entry>Extracts an artifact from the repository</entry>
            </row>

            <row>
              <entry>Make directory</entry>

              <entry>Creates one or more directories</entry>
            </row>

            <row>
              <entry>Set attributes</entry>

              <entry>Sets file attribues on a file set</entry>
            </row>

            <row>
              <entry>Symlink</entry>

              <entry>Creates a symlink</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <section>
        <title>Common Settings and Behaviour</title>

        <para>All <emphasis role="bold"><literal>to</literal></emphasis>
        elements refer to a path <emphasis>within</emphasis> the package.
        <warning>
            <para>Explain "file object" somewhere</para>
          </warning></para>

        <section xml:id="artifact-naming-and-identification">
          <title>Artifact Naming and Identification</title>

          <para>The plugin has operations that can use artifacts from the
          Maven repository directly. In order to do this the plugin require
          that you have a dependency on the artifact that you want to use.
          This is required for proper ordering in the Maven reactor.</para>

          <para>When referring an artifact from an assembly operation the
          normal <literal>groupId:artifactId[:type][:classifier]</literal>
          syntax is used. Note that the version is not specified, the version
          specified as a dependency will be used. If a type is not specified,
          a default value of <literal>jar</literal> is used.</para>

          <example>
            <title>Artifact naming</title>

            <variablelist>
              <varlistentry>
                <term><literal>com.acme:myapp</literal></term>

                <listitem>
                  <literallayout><tag>&lt;dependency&gt;
  &lt;groupId&gt;com.acme&lt;/groupId&gt;
  &lt;artifactId&gt;myapp&lt;/artifactId&gt;
  &lt;version&gt;...&lt;/version&gt;
&lt;/dependency&gt;</tag></literallayout>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><literal>com.acme:myapp:tar.gz</literal></term>

                <listitem>
                  <literallayout><tag>&lt;dependency&gt;
  &lt;groupId&gt;com.acme&lt;/groupId&gt;
  &lt;artifactId&gt;myapp&lt;/artifactId&gt;
  &lt;version&gt;...&lt;/version&gt;
  &lt;type&gt;tar.gz&lt;/type&gt;
&lt;/dependency&gt;</tag></literallayout>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><literal>com.acme:myapp:tar.gz:slave</literal></term>

                <listitem>
                  <literallayout><tag>&lt;dependency&gt;
  &lt;groupId&gt;com.acme&lt;/groupId&gt;
  &lt;artifactId&gt;myapp&lt;/artifactId&gt;
  &lt;version&gt;...&lt;/version&gt;
  &lt;type&gt;tar.gz&lt;/type&gt;
  &lt;classifier&gt;slave&lt;/classifier&gt;
&lt;/dependency&gt;</tag></literallayout>
                </listitem>
              </varlistentry>
            </variablelist>
          </example>

          <tip>
            <para>If the plugin can't find the artifact that's referred to it
            will list all available artifacts.</para>
          </tip>
        </section>

        <section xml:base="" xml:id="file-renaming">
          <title>File renaming</title>

          <para>All operations that involves moving a set of files around
          support renaming the files before putting them in the
          package.</para>

          <para>The renaming process is controlled by two attributes:</para>

          <variablelist>
            <varlistentry>
              <term><literal>pattern</literal></term>

              <listitem>
                <para>A regular expression that selects the files to be
                renamed. The regular expression may contain groups to pick out
                parts of the string.</para>

                <para>The syntax used is the standard Java syntax. See the
                reference documentation on <link
                xlink:href="http://java.sun.com/javase/1.5.0/docs/api/java/util/regex/Pattern.html">Pattern</link>.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term><literal>replacement</literal></term>

              <listitem>
                <para>The new name of the file. May contain references to
                groups matched in the <literal>pattern</literal>.</para>
              </listitem>
            </varlistentry>
          </variablelist>

          <warning>
            <para>Document the effect on the matched files vs those that
            doesn't match</para>
          </warning>

          <example>
            <title>Removing the first directory by renaming the files</title>

            <literallayout><tag>&lt;extract-artifact&gt;
  &lt;artifact&gt;org.mortbay.jetty:jetty-assembly:zip&lt;/artifact&gt;
  &lt;to&gt;/opt/jetty&lt;/to&gt;
  &lt;pattern&gt;/jetty-${jetty.version}(.*)&lt;/pattern&gt;
  &lt;replacement&gt;$1&lt;/replacement&gt;
&lt;/extract-artifact&gt;</tag></literallayout>

            <para>This example will match all files in the
            <literal>jetty-assembly</literal> artifact, put the entire path
            except the first part into group number one. The replacement value
            will be the value of the first group.</para>
          </example>
        </section>

        <section xml:id="includes-and-excludes">
          <title>Includes and Excludes</title>

          <para><warning>
              <para>Explain the difference between:<itemizedlist>
                  <listitem>
                    <para>*.foo</para>
                  </listitem>

                  <listitem>
                    <para>**/*.foo</para>
                  </listitem>
                </itemizedlist></para>
            </warning></para>

          <para><warning>
              <para>The order of includes vs excludes</para>
            </warning></para>

          <para><warning>
              <para>Explain the effect of having a basedir-like parameter set
              when calculating matches. (the include/exclude expressions can't
              contain the basedir part). Applies only to set attributes for
              now.</para>
            </warning></para>
        </section>

        <section xml:id="file-attributes">
          <title>File Attributes</title>

          <para>All file objects has a set of attributes. Note: not all
          attributes applies to all object types.</para>

          <note>
            <para>Some assembly operations support both per-directory and
            per-file attributes. If so the outer tag will be named
            <tag>&lt;fileAttributes&gt;</tag> and &lt;directoryAttributes&gt;,
            but they contain exactly the same set of elements.</para>
          </note>

          <table>
            <title>Available attributes</title>

            <tgroup cols="2">
              <colspec colnum="2" colwidth="2*" />

              <tbody>
                <row>
                  <entry><literal>user</literal></entry>

                  <entry>Specifies the user of the owns the file</entry>
                </row>

                <row>
                  <entry><literal>group</literal></entry>

                  <entry>Specifies the group that owns the file</entry>
                </row>

                <row>
                  <entry><literal>mode</literal></entry>

                  <entry><para>Specifies the read/write/executable bits on the
                  file. The value has to be be in octal
                  notation</para></entry>
                </row>
              </tbody>
            </tgroup>
          </table>

          <para>Mode examples:<itemizedlist>
              <listitem>
                <para><literal>0644</literal> becomes
                <literal>-rw-r--r--</literal></para>
              </listitem>

              <listitem>
                <para><literal>0744</literal> becomes
                <literal>-rwxr--r--</literal></para>
              </listitem>
            </itemizedlist></para>

          <para>See <xref linkend="concept-package-file-system" /> for more
          details.</para>

          <example>
            <title>Example usage of
            <literal>&lt;attributes&gt;</literal></title>

            <programlisting>&lt;attributes&gt;
  &lt;user&gt;myapp&lt;/user&gt;
  &lt;group&gt;myapp&lt;/group&gt;
  &lt;mode&gt;0644&lt;/mode&gt;
&lt;/attributes&gt;</programlisting>
          </example>
        </section>
      </section>

      <section xml:id="copy-file">
        <title>Copy File</title>

        <para>Purpose: to copy a single file from the file system.</para>

        <table>
          <title>Supported parameters for <tag>&lt;copyFile&gt;</tag></title>

          <tgroup cols="2">
            <colspec colnum="2" colwidth="2*" />

            <tbody>
              <row>
                <entry><literal>file</literal></entry>

                <entry>The file to copy</entry>
              </row>

              <row>
                <entry><literal>toFile</literal> or
                <literal>toDir</literal></entry>

                <entry>The destination file or directory. Only one of the two
                parameters may be specified. If <literal>toDir</literal> is
                used, a file with be created in the specified directory with
                the same name as the source file.</entry>
              </row>

              <row>
                <entry><literal>attributes</literal></entry>

                <entry>The attributes to set on the copied file. See <xref
                linkend="file-attributes" />.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <example>
          <title>Example usage of <tag>&lt;copyFile&gt;</tag></title>

          <programlisting>&lt;copyFile&gt;
  &lt;file&gt;src/main/native/myapp.so&lt;/file&gt;
  &lt;toFile&gt;/opt/myapp/myapp.so&lt;/toFile&gt;
  &lt;attributes&gt;
    &lt;user&gt;myapp&lt;/user&gt;
    &lt;group&gt;myapp&lt;/group&gt;
    &lt;mode&gt;0644&lt;/mode&gt;
  &lt;/attributes&gt;
&lt;/copyFile&gt;</programlisting>
        </example>
      </section>

      <section xml:id="copy-artifact">
        <title>Copy Artifact</title>

        <para>Purpose: to copy an artifact from a Maven repository.</para>

        <para>See also: <link linkend="copy-file">Copy File</link></para>

        <table>
          <title>Supported parameters for
          <tag>&lt;copyArtifact&gt;</tag></title>

          <tgroup cols="2">
            <colspec colnum="2" colwidth="2*" />

            <tbody>
              <row>
                <entry><literal>artifact</literal></entry>

                <entry>The artifact to copy. See <xref
                linkend="artifact-naming-and-identification" /> on how to
                identify the artifact to copy.</entry>
              </row>

              <row>
                <entry><literal>toFile</literal> or
                <literal>toDir</literal></entry>

                <entry>The destination file or directory. Only one of the two
                parameters may be specified. If <literal>toDir</literal> is
                used, a file with be created in the specified directory with
                the same name as the source file.</entry>
              </row>

              <row>
                <entry><literal>attributes</literal></entry>

                <entry>The attributes to set on the copied file. See <xref
                linkend="file-attributes" />.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <example>
          <title>Example usage of <tag>&lt;copyArtifact&gt;</tag></title>

          <programlisting>&lt;copyArtifact&gt;
  &lt;artifact&gt;org.jvnet.hudson.main:hudson-war:war&lt;/artifact&gt;
  &lt;toFile&gt;/opt/hudson/hudson.war&lt;/toFile&gt;
  &lt;attributes&gt;
    &lt;user&gt;hudson&lt;/user&gt;
    &lt;group&gt;hudson&lt;/group&gt;
    &lt;mode&gt;0644&lt;/mode&gt;
  &lt;/attributes&gt;
&lt;/copyArtifact&gt;</programlisting>
        </example>
      </section>

      <section xml:id="make-directory">
        <title>Make Directory</title>

        <para>Purpose: to create one or more directories</para>

        <table>
          <title>Supported parameters <tag>&lt;makeDirectory&gt;</tag></title>

          <tgroup cols="2">
            <colspec colnum="2" colwidth="2*" />

            <tbody>
              <row>
                <entry><literal>path</literal> or
                <literal>paths</literal></entry>

                <entry>The directory or directories to create. Only one of
                these parameters can be specified.</entry>
              </row>

              <row>
                <entry><literal>attributes</literal></entry>

                <entry>The attributes to set on the copied file. See <xref
                linkend="file-attributes" />.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <example>
          <title>Example usage of <tag>&lt;mkdirs&gt;</tag></title>

          <programlisting>&lt;mkdirs&gt;
  &lt;paths&gt;
    &lt;path&gt;/var/opt/jetty&lt;/path&gt;
    &lt;path&gt;/var/opt/jetty/cache&lt;/path&gt;
    &lt;path&gt;/var/opt/jetty/log&lt;/path&gt;
  &lt;/paths&gt;
  &lt;attributes&gt;
    &lt;user&gt;jetty&lt;/user&gt;
    &lt;group&gt;jetty&lt;/group&gt;
  &lt;/attributes&gt;
&lt;/mkdirs&gt;</programlisting>
        </example>
      </section>

      <section xml:id="set-attributes">
        <title>Set Attributes</title>

        <para>Purpose: to change one or more attributes on a set of
        files</para>

        <table>
          <title>Supported parameters <tag>&lt;setAttributes&gt;</tag></title>

          <tgroup cols="2">
            <colspec colnum="2" colwidth="2*" />

            <tbody>
              <row>
                <entry><literal>basedir</literal></entry>

                <entry>The base directory when applying. Default: the root of
                the package.</entry>
              </row>

              <row>
                <entry><literal>fileAttributes</literal></entry>

                <entry>The attributes to set on the matched
                <emphasis>files</emphasis>. See <xref
                linkend="file-attributes" />.</entry>
              </row>

              <row>
                <entry><literal>directoryAttributes</literal></entry>

                <entry>The attributes to set on the matched
                <emphasis>directories</emphasis>. See <xref
                linkend="file-attributes" />.</entry>
              </row>

              <row>
                <entry><literal>includes</literal> and
                <literal>excludes</literal></entry>

                <entry>Selects which files to include into the package. See
                <xref linkend="includes-and-excludes" />.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <example>
          <title>Example usage of <tag>&lt;setAttributes&gt;</tag></title>

          <programlisting>&lt;setAttributes&gt;
  &lt;basedir&gt;/usr/share/hello/bin&lt;/basedir&gt;
  &lt;fileAttributes&gt;
    &lt;user&gt;foo&lt;/user&gt;
    &lt;group&gt;bar&lt;/group&gt;
    &lt;mode&gt;0755&lt;/mode&gt;
  &lt;/fileAttributes&gt;
&lt;/setAttributes&gt;</programlisting>
        </example>
      </section>

      <section xml:id="symlink">
        <title>Symlink</title>

        <para>Purpose: to create symbolic links.</para>

        <table>
          <title>Supported parameters <tag>&lt;symlink&gt;</tag></title>

          <tgroup cols="2">
            <colspec colnum="2" colwidth="2*" />

            <tbody>
              <row>
                <entry><literal>path</literal></entry>

                <entry>The file object to create in the package</entry>
              </row>

              <row>
                <entry><literal>value</literal></entry>

                <entry>The value of the link</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <example>
          <title>Example usage of <literal>&lt;symlink&gt;</literal></title>

          <programlisting><literal>&lt;symlink&gt;
  &lt;path&gt;/var/log/myapp&lt;/path&gt;
  &lt;value&gt;/var/opt/myapp/log&lt;/value&gt;
&lt;/symlink&gt;</literal></programlisting>
        </example>

        <para>This will create a symbolink link under
        <literal>/var/log/myapp</literal> that points to
        <literal>/var/opt/myapp/log</literal>.</para>
      </section>

      <section>
        <title>Copy Directory, Extract Artifact and Extract File</title>

        <para>These operation work in a similar fasion and share these
        attributes:</para>

        <table>
          <title>Common parameters for the copy directory, extract artifact
          and extract file operations</title>

          <tgroup cols="2">
            <colspec colnum="2" colwidth="2*" />

            <tbody>
              <row>
                <entry><literal>to</literal></entry>

                <entry>The base destination directory</entry>
              </row>

              <row>
                <entry><literal>includes</literal> and
                <literal>excludes</literal></entry>

                <entry>Selects which files to include into the package. See
                <xref linkend="includes-and-excludes" />.</entry>
              </row>

              <row>
                <entry><literal>pattern</literal> and
                <literal>replacement</literal></entry>

                <entry>Controls renaming of the files. See <xref
                linkend="file-renaming" />.</entry>
              </row>

              <row>
                <entry><literal>fileAttributes</literal></entry>

                <entry>The attributes to set on the matched
                <emphasis>files</emphasis>. See <xref
                linkend="file-attributes" />.</entry>
              </row>

              <row>
                <entry><literal>directoryAttributes</literal></entry>

                <entry>The attributes to set on the matched
                <emphasis>directories</emphasis>. See <xref
                linkend="file-attributes" />.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <section xml:id="copy-directory">
          <title>Copy Directory</title>

          <para>Purpose: to copy a directory structure.</para>

          <table>
            <title>Additional parameters for
            <tag>&lt;copyDirectory&gt;</tag></title>

            <tgroup cols="2">
              <colspec colnum="2" colwidth="2*" />

              <tbody>
                <row>
                  <entry><literal>from</literal></entry>

                  <entry>The directory to copy from.</entry>
                </row>
              </tbody>
            </tgroup>
          </table>

          <example>
            <title>Example usage of <tag>&lt;copyDirectory&gt;</tag></title>

            <programlisting>&lt;copyDirectory&gt;
  &lt;from&gt;target/appassembler&lt;/from&gt;
  &lt;to&gt;/usr/share/hello&lt;/to&gt;
&lt;/copyDirectory&gt;</programlisting>
          </example>
        </section>

        <section xml:id="extract-artifact">
          <title>Extract Artifact</title>

          <para>Purpose: to extract an artifact from the repository into the
          package.</para>

          <table>
            <title>Additional parameters for
            <tag>&lt;extractArtifacrt&gt;</tag></title>

            <tgroup cols="2">
              <colspec colnum="2" colwidth="2*" />

              <tbody>
                <row>
                  <entry><literal>artifact</literal></entry>

                  <entry>The artifact to copy. See <xref
                  linkend="artifact-naming-and-identification" /> on how to
                  identify the artifact to copy.</entry>
                </row>
              </tbody>
            </tgroup>
          </table>

          <warning>
            <para>document the supported archive types. (at least zip, jar and
            war are supported).</para>
          </warning>

          <example>
            <title>Example usage of <tag>&lt;extractArtifact&gt;</tag></title>

            <programlisting>&lt;extractArtifact&gt;
  &lt;artifact&gt;org.mortbay.jetty:jetty-assembly:zip&lt;/artifact&gt;
  &lt;to&gt;/opt/jetty&lt;/to&gt;
&lt;/extractArtifact&gt;</programlisting>
          </example>
        </section>

        <section xml:id="extract-file">
          <title>Extract File</title>

          <para>Purpose: to extract a file from the file system into the
          package.</para>

          <warning>
            <para>document the supported archive types. (at least zip, jar and
            war are supported).</para>
          </warning>

          <table>
            <title>Additional parameters for
            <tag>&lt;extractDile&gt;</tag></title>

            <tgroup cols="2">
              <colspec colnum="2" colwidth="2*" />

              <tbody>
                <row>
                  <entry><literal>archive</literal></entry>

                  <entry>The path to an archive to extract. See <xref
                  linkend="artifact-naming-and-identification" /> on how to
                  identify the artifact to copy.</entry>
                </row>
              </tbody>
            </tgroup>
          </table>

          <example>
            <title>Example usage of <tag>&lt;extractArtifact&gt;</tag></title>

            <programlisting>&lt;extractFile&gt;
  &lt;archive&gt;src/main/extras.zip&lt;/archive&gt;
  &lt;to&gt;/opt/share/myapp/extras&lt;/to&gt;
&lt;/extractFile&gt;</programlisting>
          </example>
        </section>
      </section>
    </chapter>

    <chapter>
      <title>Creating Native Package Repositories</title>

      <para></para>

      <section>
        <title>Creating Debian/APT Repositories</title>

        <para></para>
      </section>

      <section>
        <title>Creating RPM/Yum Repositories</title>

        <para></para>
      </section>

      <section>
        <title>Creating pkg-get/pkgutil Repositories</title>

        <para></para>
      </section>
    </chapter>

    <chapter>
      <title>Troubleshooting</title>

      <section>
        <title>Debugging</title>

        <para>The plugin has its own mechanism to be more verbose to make it
        easier to just debug the plugin. By running Maven with the
        <command>-Dmaven.unix.debug=true</command> flag you will get a lot of
        extra debugging information. In particular you will get information
        about all the assembly operations it has collected per package and all
        output from any external command it will use while building the
        package.</para>
      </section>
    </chapter>

    <!--
    <chapter>
      <title>Upgrading From Previous Versions</title>
      <section>
        <title>Upgrading from 1.0-alpha-1</title>

        <copy> => <copyFile>, <copyDirectory>
        <defaults>
          <fileUser>..</fileUser>
          <fileGroup>..</fileGroup>
          <directoryUser>..</directoryUser>
          <directoryGroup>..</directoryGroup>
        </defaults>

        =>

        <defaults>
          <fileAttributes>
            <user>..</user>
            <group>..</group>
          </fileAttributes>
        </defaults>
      </section>
    </chapter>
    -->
  </part>

  <part>
    <title>Useful Tips For Making Useful Packages</title>

    <chapter>
      <title>Package Command Reference</title>

      <para>This part describes a set of commands that are useful for looking
      into and disassembling packages.</para>

      <section>
        <title><code>dpkg</code> Commands</title>

        <section>
          <title>Listing All Files In a Package</title>

          <example>
            <title>Output of <code>rpm -q -l -p</code></title>

            <screen><?dbfo-font-size 75%?><xi:include
                href="command-reference/rpm-qlp.txt" parse="text" /></screen>
          </example>
        </section>
      </section>

      <section>
        <title><code>rpm</code> Commands</title>

        <section>
          <title>List All Files In a Package</title>

          <example>
            <title>Output of <code>rpm -q -l -p</code></title>

            <screen><?dbfo-font-size 75%?><xi:include
                href="command-reference/rpm-qlp.txt" parse="text" /></screen>
          </example>
        </section>

        <section>
          <title>List All Files In a Package With File Permissions</title>

          <example>
            <title>Output of <code>rpm -q -l -p -v</code></title>

            <screen><?dbfo-font-size 75%?><xi:include
                href="command-reference/rpm-qvlp.txt" parse="text" /></screen>
          </example>
        </section>

        <section>
          <title>Listing All Available Software Groups</title>

          <para>This is useful select an appropriate category when configuring
          the Group setting for RPMs.</para>

          <example>
            <title>Listing all available software groups</title>

            <screen><?dbfo-font-size 75%?><xi:include
                href="command-reference/cat-GROUPS.txt" parse="text" /></screen>
          </example>
        </section>
      </section>

      <section>
        <title><code>zip</code> Commands</title>

        <para>Note that there are no standard for the utilities used to handle
        zip files. However, most platforms support this command.</para>

        <example>
          <title>Listing all files in a ZIP file</title>

          <screen><?dbfo-font-size 75%?><xi:include
              href="command-reference/unzip-l.txt" parse="text" /></screen>
        </example>
      </section>
    </chapter>

    <chapter>
      <title>Snippets for Scripts</title>

      <section>
        <title>RedHat/Fedora</title>

        <section>
          <title>Making your server start on boot</title>

          <para>If you want your application to start when the machine starts
          you can use the <code>chkconfig</code>. Your script has to be
          chkconfig-compatible and installed under
          <code>/etc/init.d/foo</code>. The script has to include this line:
          <screen># chkconfig: 345 10 90</screen>This will make the system
          start the application in runlevels 3, 4 and 6 with the priority 10
          and 90 at shutdown and start, respectively. To install such a
          script, simply run</para>

          <screen>chkconfig --add foo</screen>

          <para>Similary, if you want to remove it when the package is
          uninstalled simply run:</para>

          <screen>chkconfig --del foo</screen>

          <section>
            <title>See Also</title>

            <itemizedlist>
              <listitem>
                <para>http://docs.fedoraproject.org/en-US/Fedora/12/html/Deployment_Guide/s1-services-chkconfig.html</para>
              </listitem>

              <listitem>
                <para>http://linux.die.net/man/8/chkconfig</para>
              </listitem>
            </itemizedlist>
          </section>
        </section>
      </section>
    </chapter>
  </part>

  <part xml:id="version-history-and-upgrading">
    <title>Version History and Upgrading</title>

    <preface>
      <title>Preface to Part IV</title>

      <para>This part document the major features that was introduced in the
      different versions and instructions on how to upgrade between the
      different alpha and beta releases.</para>

      <para>Once the plugin stabilizes expect the upgrade instructions to be
      removed as the pre releases will be unsupported.</para>
    </preface>

    <chapter>
      <title>1.0-alpha-4</title>

      <section>
        <title>Change Log</title>

        <para>Major features added:</para>

        <itemizedlist>
          <listitem>
            <para>Support for creating "zip" archives</para>
          </listitem>

          <listitem>
            <para>Added support for classes for PKG</para>
          </listitem>

          <listitem>
            <para>%doc and %config for RPM</para>
          </listitem>

          <listitem>
            <para>Lots of documentation, including a PDF</para>
          </listitem>
        </itemizedlist>

        <para>JIRA issues fixed:</para>

        <itemizedlist>
          <listitem>
            <para>MUNIX-18: Simplify the script mechanism</para>
          </listitem>

          <listitem>
            <para>MUNIX-17: Document how versions and revisions are
            calculated</para>
          </listitem>

          <listitem>
            <para>MUNIX-16: Document how the scripts directories work</para>
          </listitem>

          <listitem>
            <para>MUNIX-15: Improve error message when an artifact is not
            found</para>
          </listitem>

          <listitem>
            <para>MUNIX-12: Add support for creating zip files</para>
          </listitem>

          <listitem>
            <para>MUNIX-6: set-attributes doesn't pick up paths that aren't
            explicitly created with mkdirs</para>
          </listitem>

          <listitem>
            <para>MUNIX-4: Add support for the %doc directive for RPM</para>
          </listitem>

          <listitem>
            <para>MUNIX-3: Add support for the %config directive for
            RPM</para>
          </listitem>

          <listitem>
            <para>MUNIX-1: the "release" portion of the rpm does not have to
            be an int</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Upgrading from 1.0-alpha-3</title>

        <para>The <tag>&lt;softwareGroup&gt;</tag> element within the RPM
        configuration tag (<tag>&lt;rpm&gt;</tag>) has been renamed to
        <tag>&lt;group&gt;</tag> to match the field in the RPM spec file more
        closely.</para>

        <para>The tag <tag>&lt;id&gt;</tag> has been renamed to
        <tag>&lt;classifier&gt;</tag> to be closer to the existing Maven
        nomenclature.</para>

        <para>All examples use hyphened elements instead of camel casing to be
        more consistent with how Maven POMs normally are written. This will
        not break any builds as Maven interpret both version the same way. For
        example <tag>&lt;fileAttributes&gt;</tag> is now used instead of
        <tag>&lt;file-attribues&gt;</tag>.</para>
      </section>
    </chapter>
  </part>
</book>
